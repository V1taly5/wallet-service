// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/service/Irepository.go

// Package mock_repository is a generated GoMock package.
package mockrepository

import (
	context "context"
	reflect "reflect"
	models "wallet-service/internal/models"

	gomock "go.uber.org/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockWalletRepository is a mock of WalletRepository interface.
type MockWalletRepository struct {
	ctrl     *gomock.Controller
	recorder *MockWalletRepositoryMockRecorder
}

// MockWalletRepositoryMockRecorder is the mock recorder for MockWalletRepository.
type MockWalletRepositoryMockRecorder struct {
	mock *MockWalletRepository
}

// NewMockWalletRepository creates a new mock instance.
func NewMockWalletRepository(ctrl *gomock.Controller) *MockWalletRepository {
	mock := &MockWalletRepository{ctrl: ctrl}
	mock.recorder = &MockWalletRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWalletRepository) EXPECT() *MockWalletRepositoryMockRecorder {
	return m.recorder
}

// CreateWallet mocks base method.
func (m *MockWalletRepository) CreateWallet(arg0 context.Context, arg1 uuid.UUID) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWallet", arg0, arg1)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWallet indicates an expected call of CreateWallet.
func (mr *MockWalletRepositoryMockRecorder) CreateWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWallet", reflect.TypeOf((*MockWalletRepository)(nil).CreateWallet), arg0, arg1)
}

// GetWallet mocks base method.
func (m *MockWalletRepository) GetWallet(arg0 context.Context, arg1 uuid.UUID) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWallet", arg0, arg1)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWallet indicates an expected call of GetWallet.
func (mr *MockWalletRepositoryMockRecorder) GetWallet(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWallet", reflect.TypeOf((*MockWalletRepository)(nil).GetWallet), arg0, arg1)
}

// UpdateWalletBalance mocks base method.
func (m *MockWalletRepository) UpdateWalletBalance(arg0 context.Context, arg1 uuid.UUID, arg2 int64, arg3 models.OperationType) (*models.Wallet, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWalletBalance", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.Wallet)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateWalletBalance indicates an expected call of UpdateWalletBalance.
func (mr *MockWalletRepositoryMockRecorder) UpdateWalletBalance(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWalletBalance", reflect.TypeOf((*MockWalletRepository)(nil).UpdateWalletBalance), arg0, arg1, arg2, arg3)
}
